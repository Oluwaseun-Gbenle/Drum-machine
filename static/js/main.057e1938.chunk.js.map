{"version":3,"sources":["components/drum.jsx","serviceWorker.js","index.js"],"names":["drumOne","keyTrigger","keyCode","id","url","DrumMachine","props","handleKeys","bind","handleKeyPress","document","addEventListener","this","removeEventListener","event","sound","getElementById","currentTime","play","updateDisplay","clipId","replace","className","onClick","src","clip","React","Component","PadBank","padBank","power","playList","map","drumObj","i","arr","App","state","switch","currentSound","player","volumeChange","clearDisplay","volumeControl","switchControl","powerControl","updateDisplayClip","name","setState","e","target","value","Math","round","setTimeout","display","style","backgroundColor","slice","call","getElementsByClassName","forEach","volume","optionOne","toggleSwitch","optionTwo","type","min","max","step","onChange","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.057e1938.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './drum.css';\r\n\r\nconst drumOne = [{\r\n    keyTrigger:'Q',\r\n    keyCode: 81,\r\n    id: 'Bass',\r\n url:\r\n  'https://freewavesamples.com/files/Bass-Drum-1.wav'\r\n  },\r\n  {\r\n     keyTrigger:'W',\r\n    keyCode: 87,\r\n    id: 'Snare', \r\n    url: 'https://freewavesamples.com/files/Ensoniq-ESQ-1-Snare.wav'\r\n  },\r\n  {\r\n    keyTrigger:'E',\r\n    keyCode: 69,\r\n    id: 'Hi-Hat', \r\n    url:\r\n 'https://freewavesamples.com/files/Closed-Hi-Hat-1.wav'   \r\n  }, \r\n  {\r\n    keyTrigger:'A',\r\n    keyCode: 65,\r\n    id: 'Hi-Hat2',  \r\n    url:\r\n 'https://freewavesamples.com/files/Ensoniq-SQ-1-Open-Hi-Hat.wav' \r\n  },\r\n {\r\n    keyTrigger:'S',\r\n    keyCode: 83,\r\n    id: 'Drum-Tom',  \r\n   url:\r\n   'https://freewavesamples.com/files/Floor-Tom-1.wav' \r\n },    \r\n{\r\n    keyTrigger:'D',\r\n    keyCode: 68, \r\n    id: 'Accessory-1',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\r\n  },\r\n  {\r\n     keyTrigger:'Z',\r\n    keyCode: 90, \r\n    id: 'Assessory-2',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Give_us_a_light.mp3'\r\n  },\r\n {\r\n    keyTrigger:'X',\r\n    keyCode: 88, \r\n    id: 'Clap',\r\n    url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\r\n },\r\n {\r\n  keyTrigger:'C',\r\n    keyCode: 67, \r\n    id: 'Kick-n-Hat',\r\n   url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\r\n }];\r\n\r\n\r\nclass DrumMachine extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n this.handleKeys = this.handleKeys.bind(this);\r\n    this.handleKeyPress = this.handleKeyPress.bind(this); \r\n  }\r\n  componentDidMount() {\r\n    document.addEventListener('keydown', this.handleKeyPress);\r\n  }\r\n  componentWillUnmount() {\r\n    document.removeEventListener('keydown', this.handleKeyPress);\r\n  }\r\n handleKeyPress(event) {\r\n  if (event.keyCode === this.props.keyCode) {\r\n     this.handleKeys();\r\n   }\r\n } \r\n  \r\n  \r\n  handleKeys(event) {\r\n    const sound = document.getElementById(this.props.keyTrigger);\r\n  sound.currentTime = 0;\r\n   sound.play();\r\nthis.props.updateDisplay(this.props.clipId.replace(/-/g, ' '));\r\n }\r\n \r\n  \r\n  \r\n  render() {\r\n    return (\r\n      <div> \r\n      <button\r\n         className=\"drum-pad btn\"\r\n         id={this.props.clipId}\r\n         onClick={this.handleKeys}>\r\n        <audio\r\n          id={this.props.keyTrigger}\r\n          src={this.props.clip}\r\n           className=\"clip\">\r\n        </audio>\r\n        {this.props.keyTrigger}\r\n        </button>\r\n      </div> \r\n  )\r\n  }\r\n}\r\n class PadBank extends React.Component {\r\n   \r\n   render() {\r\n     let padBank;\r\n     this.props.power === true ?\r\n   \r\n       padBank =\r\n   this.props.playList.map((drumObj,i,arr) => {\r\n   return (\r\n   <DrumMachine\r\n     clipId={arr[i].id}\r\n     clip={arr[i].url}\r\n\t   keyTrigger={arr[i].keyTrigger}\r\n\t\tkeyCode={arr[i].keyCode} \r\n\tupdateDisplay={this.props.updateDisplay}\r\n     power={this.props.power}\r\n     />\r\n   )\r\n         }) :   padBank =\r\n   this.props.playList.map((drumObj,i,arr) => {\r\n   return (\r\n   <DrumMachine\r\n     clipId={arr[i].id}\r\n     clip=\"#\"\r\n\t   keyTrigger={arr[i].keyTrigger}\r\n\t\tkeyCode={arr[i].keyCode} \r\n\tupdateDisplay={this.props.updateDisplay}\r\n     power={this.props.power}\r\n     />\r\n   )\r\n         });\r\n       \r\n     return(\r\n     <div className=\"pad-bank\" >\r\n\t\t\t\t{padBank}\r\n\t\t\t</div>\r\n     )\r\n   }\r\n }\r\n\r\n\r\n  class App extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        power: false,\r\n        switch: false,\r\n       currentSound:'',\r\n        player:drumOne,\r\n        volumeChange: 0.3\r\n      }\r\n      this.clearDisplay = this.clearDisplay.bind(this);\r\n       this.volumeControl = this.volumeControl.bind(this);\r\n      this.switchControl = this.switchControl.bind(this);\r\n      this.powerControl = this.powerControl.bind(this);\r\n     this.updateDisplayClip = this.updateDisplayClip.bind(this); \r\n    }\r\n    \r\n    updateDisplayClip (name) {\r\n      if (this.state.power === true) {\r\n    this.setState({\r\n      currentSound: name\r\n    });\r\n  }\r\n    }\r\n    powerControl() {\r\n    this.setState({\r\n      power: !this.state.power,\r\n     switch: !this.state.switch,\r\n      currentSound:''\r\n    });\r\n  }\r\n  \r\n  switchControl () {\r\n    this.setState({\r\n    switch: !this.state.switch\r\n      });\r\n  } \r\n    \r\n    volumeControl (e) {\r\n      if(this.state.power === true) {\r\n         this.setState({\r\n        volumeChange: e.target.value,\r\n           currentSound: \"Volume: \" +  Math.round(e.target.value * 100) \r\n            });\r\n         setTimeout(() => this.clearDisplay(), 1000);\r\n      }\r\n    }\r\n   clearDisplay() {\r\n    this.setState({\r\n      display: ''\r\n    });\r\n  } \r\n    \r\n  render() {\r\n     const style = this.state.power === true ? {backgroundColor: 'red'}: {backgroundColor: '#a42727'}    \r\n        {const clips = [].slice.call(document.getElementsByClassName('clip'));\r\n      clips.forEach(sound => {\r\n        sound.volume = this.state.volumeChange\r\n      });\r\n    }\r\n    let optionOne =  <p id= \"pstyle\" toggleSwitch={this.switchControl}>OFF<button id= \"pBtn\" style={style} onClick={this.powerControl}></button></p>;\r\n    let optionTwo = <p id= \"pstyle\" toggleSwitch={this.switchControl}>ON<button id= \"pBtn\" style={style} onClick={this.powerControl}></button></p>\r\n    return (\r\n      <div id=\"drum-machine\">\r\n          <div className=\"well\"> \r\n           \r\n            <PadBank\r\n              power={this.state.power}\r\n             playList={this.state.player}\r\n            updateDisplay={this.updateDisplayClip}\r\n />     \r\n            \r\n            {!this.state.switch? optionOne : optionTwo}\r\n         \r\n            \r\n            <p id=\"display\">{this.state.currentSound}\r\n        </p>\r\n            \r\n            <div id=\"vol\">\r\n            <p id=\"pVol\">Volume</p>\r\n            <input type=\"range\" min=\"0\" max=\"1\" step=\"0.01\" value={this.state.volumeChange} onChange={this.volumeControl} />\r\n              \r\n             \r\n            </div>\r\n            \r\n            </div>\r\n        </div> \r\n    )\r\n     \r\n  \r\n}\r\n  } \r\n \r\nexport default App ;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/drum';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}